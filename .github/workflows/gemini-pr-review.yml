name: 🧐 Gemini CLI - PR Review

on:
  pull_request:
    types: [opened, reopened, synchronize]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Número del PR a revisar"
        required: false
        type: string

jobs:
  review:
    name: Revisar PR con Gemini
    runs-on: ubuntu-latest

  # Solo ejecutar: 1) PRs automáticamente, 2) manualmente con /review en PRs
    if: >-
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request != null &&
       contains(github.event.comment.body, '@gemini-cli') && 
       contains(github.event.comment.body, '/review'))

    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'
      statuses: 'write'

  # Permisos explicados:
  # - contents:read -> leer código para análisis
  # - id-token:write -> útil si se intercambian credenciales o tokens (OIDC)
  # - issues/pull-requests:write -> para comentar en PRs y crear issues si hace falta
  # - statuses:write -> permitir reportar checks/status al PR

    steps:
      - name: Checkout del código
        # Paso esencial: obtener el código del PR para poder extraer diffs y analizar.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtener diff del PR
        # Paso: construir un resumen limitado (hasta 10 archivos) con fragmentos del patch.
        # Esto se pasa luego al prompt para que Gemini revise los cambios más relevantes.
        id: get-diff
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || 
                           context.payload.inputs?.pr_number ||
                           (context.payload.issue?.pull_request ? context.payload.issue.number : null);
            
            if (prNumber) {
              try {
                const { data: files } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                let diffContent = "**ARCHIVOS MODIFICADOS:**\n\n";
                
                for (const file of files.slice(0, 10)) { // Limitar a 10 archivos
                  diffContent += `### 📄 ${file.filename}\n`;
                  diffContent += `**Estado**: ${file.status}\n`;
                  diffContent += `**Cambios**: +${file.additions} -${file.deletions}\n\n`;
                  
                  if (file.patch) {
                    diffContent += "```diff\n";
                    diffContent += file.patch.substring(0, 2000); // Limitar tamaño
                    diffContent += "\n```\n\n";
                  }
                }
                
                return diffContent;
              } catch (error) {
                return "❌ Error obteniendo diff del PR: " + error.message;
              }
            }
            return "❌ No se pudo determinar el número del PR";

      - name: Ejecutar Gemini CLI para Revisión
        # Paso: enviar el diff resumido a Gemini para obtener comentarios estructurados
        id: gemini-review
        uses: google-github-actions/run-gemini-cli@v0.1.10
        with:
          prompt: |
            Eres un revisor de código experto y experimentado.

            **PULL REQUEST A REVISAR:**
            Título: ${{ github.event.pull_request.title || 'PR desde comentario' }}
            Descripción: ${{ github.event.pull_request.body || 'Ver comentarios para contexto' }}
            
            **CÓDIGO DEL PR:**
            ${{ steps.get-diff.outputs.result }}

            Tu tarea es realizar una revisión exhaustiva del Pull Request, enfocándote en:

            🔒 **Seguridad**: Vulnerabilidades, validación de entrada, autenticación
            ⚡ **Rendimiento**: Algoritmos eficientes, consultas optimizadas, uso de memoria
            🛡️ **Confiabilidad**: Manejo de errores, casos edge, testing
            🧹 **Mantenibilidad**: Código limpio, documentación, convenciones
            ✅ **Funcionalidad**: Lógica correcta, cumplimiento de requisitos

            Proporciona feedback específico usando estos emojis de prioridad:
            🔴 **Crítico**: Debe corregirse antes del merge
            🟠 **Alto**: Debería corregirse
            🟡 **Medio**: Mejoras recomendadas
            🟢 **Bajo**: Sugerencias opcionales

            **Formato de respuesta**:

            ## 🔍 Revisión de Código

            ### ✅ Aspectos Positivos
            - [Destacar buenas prácticas encontradas]

            ### 🔍 Análisis por Categoría

            #### 🔒 Seguridad
            [Evaluación de seguridad]

            #### ⚡ Rendimiento  
            [Evaluación de rendimiento]

            #### 🛡️ Confiabilidad
            [Evaluación de confiabilidad]

            #### 🧹 Mantenibilidad
            [Evaluación de mantenibilidad]

            ### 📋 Recomendaciones

            #### 🔴 Críticas
            - [Issues que deben corregirse]

            #### 🟠 Importantes
            - [Mejoras recomendadas]

            #### 🟡 Sugerencias
            - [Mejoras opcionales]

            ### 🎯 Veredicto
            - [ ] ✅ Aprobado - Listo para merge
            - [ ] 🔄 Necesita cambios menores
            - [ ] ⛔ Requiere cambios importantes

            Responde en español, sé constructivo y proporciona ejemplos de código cuando sea útil.

          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}

      - name: Comentar revisión en el PR
        # Paso: publicar la revisión generada por Gemini como comentario en el PR.
        if: success()
        uses: actions/github-script@v7
        env:
          GEMINI_RESPONSE: ${{ steps.gemini-review.outputs.summary }}
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || 
                           context.payload.inputs?.pr_number ||
                           (context.payload.issue?.pull_request ? context.payload.issue.number : null);

            if (prNumber) {
              const geminiResponse = process.env.GEMINI_RESPONSE || 'No se pudo obtener la respuesta de Gemini.';
              
              // Comentar la revisión
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `🤖 **Revisión Automática por Gemini CLI**\n\n${geminiResponse}`
              });
              
              console.log(`Revisión comentada en PR #${prNumber}`);
            }

      - name: Comentar si hay error
        # Paso: en caso de fallo, comentar con enlace a logs para facilitar debugging.
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || 
                           context.payload.inputs?.pr_number ||
                           (context.payload.issue?.pull_request ? context.payload.issue.number : null);
                           
            if (prNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '❌ Error al revisar el PR. [Ver logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
              });
            }
