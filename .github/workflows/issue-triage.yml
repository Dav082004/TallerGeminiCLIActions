name: Clasificación de Issues con Gemini CLI

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'issues') ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       contains(github.event.comment.body, '/clasificar'))

    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v4

      - name: Obtener contexto del issue
        id: context
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          fi

      - name: Ejecutar API de Gemini
        id: gemini
        run: |
          PROMPT="Eres un experto gerente de proyectos y clasificador de issues para el proyecto TaskFlow Manager.

          CONTEXTO: Esta es una aplicación web de gestión de tareas construida con Node.js y JavaScript vanilla.

          TAREA: Analiza el siguiente issue de GitHub y proporciona recomendaciones de clasificación.

          Título del Issue: ${{ github.event.issue.title }}
          Contenido del Issue: ${{ github.event.issue.body }}
          Autor del Issue: ${{ github.event.issue.user.login }}

          CRITERIOS DE CLASIFICACIÓN:
          1. Clasificación: Determina si es un bug, solicitud de función, pregunta o issue de documentación
          2. Prioridad: Asigna prioridad (baja, media, alta, crítica)
          3. Etiquetas: Sugiere etiquetas apropiadas
          4. Equipo: Sugiere equipo (frontend, backend, documentación)
          5. Esfuerzo: Proporciona estimación aproximada (1-5 story points)

          FORMATO DE RESPUESTA:
          Clasificación: [bug/mejora/pregunta/documentación]
          Prioridad: [baja/media/alta/crítica]
          Esfuerzo Estimado: [1-5 story points]
          Equipo: [frontend/backend/documentación/cualquiera]
          Etiquetas Sugeridas: etiqueta1, etiqueta2, etiqueta3
          Análisis: Breve explicación del issue y razonamiento
          Próximos Pasos: 1. Paso uno 2. Paso dos"

          RESPONSE=$(curl -s -H "Content-Type: application/json" \
            -H "x-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": \"$PROMPT\"
                }]
              }]
            }" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent")

          RESULT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Error: No se pudo procesar la clasificación"')
          
          echo "$RESULT" > resultado_clasificacion.txt
          echo "response_file=resultado_clasificacion.txt" >> $GITHUB_OUTPUT

      - name: Publicar comentario de clasificación
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resultadoClasificacion = fs.readFileSync('resultado_clasificacion.txt', 'utf8');
            
            const comentario = '## 🤖 Análisis de Clasificación Gemini CLI\n\n' + 
                                resultadoClasificacion + 
                                '\n\n---\n🤖 *Esta clasificación fue realizada automáticamente por Gemini CLI*\n💡 *Para re-clasificar manualmente, comenta: `@gemini-cli /clasificar`*';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.context.outputs.issue_number }},
              body: comentario
            });
