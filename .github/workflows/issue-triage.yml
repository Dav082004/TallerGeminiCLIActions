name: Issue Triage with Gemini CLI

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'issues') ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       contains(github.event.comment.body, '/triage'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini API
        id: gemini
        run: |
          PROMPT="You are an expert project manager and issue triager for the TaskFlow Manager project.

          CONTEXT: This is a task management web application built with Node.js and vanilla JavaScript.

          TASK: Analyze the following GitHub issue and provide triage recommendations.

          Issue Title: ${{ github.event.issue.title }}
          Issue Body: ${{ github.event.issue.body }}
          Issue Author: ${{ github.event.issue.user.login }}

          TRIAGE GUIDELINES:
          1. Classification: Determine if this is a bug, feature request, question, or documentation issue
          2. Priority: Assign priority (low, medium, high, critical)
          3. Labels: Suggest appropriate labels
          4. Team: Suggest team (frontend, backend, documentation)
          5. Effort: Provide rough estimate (1-5 story points)

          RESPONSE FORMAT:
          Classification: [bug/enhancement/question/documentation]
          Priority: [low/medium/high/critical]
          Estimated Effort: [1-5 story points]
          Team: [frontend/backend/documentation/any]
          Suggested Labels: label1, label2, label3
          Analysis: Brief explanation of the issue and reasoning
          Next Steps: 1. Step one 2. Step two"

          RESPONSE=$(curl -s -H "Content-Type: application/json" \
            -H "x-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": \"$PROMPT\"
                }]
              }]
            }" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent")

          RESULT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Error: Could not process triage"')
          
          echo "$RESULT" > triage_result.txt
          echo "response_file=triage_result.txt" >> $GITHUB_OUTPUT

      - name: Post triage comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const triageResult = fs.readFileSync('triage_result.txt', 'utf8');
            
            const commentBody = '## ðŸ¤– Gemini CLI Triage Analysis\n\n' + 
                                triageResult + 
                                '\n\n---\nðŸ¤– *This triage was performed automatically by Gemini CLI*\nðŸ’¡ *For manual re-triage, comment: `@gemini-cli /triage`*';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.context.outputs.issue_number }},
              body: commentBody
            });
