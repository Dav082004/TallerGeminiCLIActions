# =============================================================
# WORKFLOW: Gemini CLI - Clasificaci√≥n Autom√°tica de Issues
# =============================================================
# Este workflow proporciona clasificaci√≥n autom√°tica de issues usando IA
# Funcionalidades:
# - üè∑Ô∏è Asigna labels autom√°ticamente a issues nuevos
# - ü§ñ Analiza contenido y context con Gemini
# - üí¨ Responde al comando @gemini-cli /triage
# - üìã Usa solo labels existentes en el repositorio
# =============================================================

name: 'üè∑Ô∏è Gemini Automated Issue Triage'

# EVENTOS QUE ACTIVAN EL WORKFLOW
on:
  issues:                           # Issues nuevos o reabiertos
    types:
      - 'opened'
      - 'reopened'
  issue_comment:                    # Comando /triage en comentarios
    types:
      - 'created'
  workflow_dispatch:                # Ejecuci√≥n manual
    inputs:
      issue_number:
        description: 'N√∫mero del issue a clasificar'
        required: true
        type: 'number'

# CONTROL DE CONCURRENCIA
# Evita m√∫ltiples ejecuciones en el mismo issue
concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

# CONFIGURACI√ìN PREDETERMINADA
defaults:
  run:
    shell: 'bash'

# PERMISOS NECESARIOS
permissions:
  contents: 'read'         # üìñ Para leer el repositorio
  id-token: 'write'        # üîê Para autenticaci√≥n con Google Cloud
  issues: 'write'          # üè∑Ô∏è Para agregar labels a issues
  statuses: 'write'        # üìä Para actualizar estados

jobs:
  triage-issue:
    # =================================================================
    # CONDICIONES DE ACTIVACI√ìN
    # =================================================================
    # Se ejecuta cuando:
    # 1. Se abre o reabre un issue
    # 2. Se ejecuta manualmente
    # 3. Alguien con permisos usa @gemini-cli /triage
    # =================================================================
    if: |-
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '@gemini-cli /triage') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
      )
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'
    
    steps:
      # =================================================================
      # PASO 1: CHECKOUT DEL REPOSITORIO
      # =================================================================
      # Necesario para acceder a los archivos del proyecto
      # =================================================================
      - name: 'üì• Checkout del repositorio'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5

      # =================================================================
      # PASO 2: GENERAR TOKEN DE GITHUB APP (OPCIONAL)
      # =================================================================
      # Si se configura una GitHub App, genera un token personalizado
      # =================================================================
      - name: 'üîê Generar Token de GitHub App'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      # =================================================================
      # PASO 3: OBTENER LABELS EXISTENTES DEL REPOSITORIO
      # =================================================================
      # Recopila todos los labels disponibles para que Gemini solo use
      # labels que ya existen en el repositorio
      # =================================================================
      - name: 'üè∑Ô∏è Obtener Labels del Repositorio'
        id: 'get_labels'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const labelNames = labels.map(label => label.name);
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Encontrados ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;

      # =================================================================
      # PASO 4: AN√ÅLISIS DEL ISSUE CON GEMINI
      # =================================================================
      # El coraz√≥n del workflow: Gemini analiza el issue y sugiere labels
      # Configuraci√≥n: Modelo, herramientas limitadas, prompt en espa√±ol
      # =================================================================
      - name: 'ü§ñ An√°lisis del Issue con Gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_issue_analysis'
        env:
          GITHUB_TOKEN: '' # No pasar token de auth aqu√≠ por seguridad
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
          AVAILABLE_LABELS: '${{ steps.get_labels.outputs.available_labels }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "coreTools": [
                "run_shell_command(echo)"
              ],
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          # =================================================
          # PROMPT EN ESPA√ëOL PARA CLASIFICACI√ìN DE ISSUES
          # =================================================
          prompt: |-
            ## ü§ñ ROL

            Eres un asistente especializado en clasificaci√≥n de issues de GitHub.
            Analiza el issue actual e identifica los labels m√°s apropiados de los
            disponibles. Usa las herramientas disponibles para recopilar informaci√≥n;
            no solicites que se proporcione informaci√≥n adicional.

            **IMPORTANTE: Todas tus respuestas y explicaciones DEBEN estar en ESPA√ëOL.**

            ## üìã PASOS A SEGUIR

            1. üîç Revisa los labels disponibles en la variable de entorno: "${AVAILABLE_LABELS}".
            2. üìñ Revisa el t√≠tulo y cuerpo del issue proporcionados en las variables
               de entorno: "${ISSUE_TITLE}" y "${ISSUE_BODY}".
            3. üè∑Ô∏è Clasifica el issue usando los labels apropiados de los disponibles.
            4. üì§ Genera la salida en formato JSON con explicaci√≥n detallada, por ejemplo:
               ```
               {"labels_to_set": ["kind/bug", "priority/p0"], "explanation": "Este es un reporte de bug cr√≠tico que afecta la funcionalidad principal del sistema. Se asigna 'kind/bug' porque describe un comportamiento no deseado y 'priority/p0' porque impacta severamente a los usuarios."}
               ```
            5. ‚ùå Si el issue no puede clasificarse con los labels disponibles, genera:
               ```
               {"labels_to_set": [], "explanation": "No es posible clasificar este issue con los labels disponibles en el repositorio. Se necesitar√≠an labels adicionales como 'tipo/consulta' o 'estado/necesita-m√°s-info'."}
               ```

            ## üìè DIRECTRICES DE CLASIFICACI√ìN

            - ‚úÖ **Solo usa labels que ya existen en el repositorio**
            - üéØ **Asigna TODOS los labels aplicables bas√°ndote en el contenido del issue**
            - üîç **Analiza cuidadosamente el tipo de issue**: bug, feature request, documentaci√≥n, etc.
            - ‚ö° **Considera la prioridad y severidad** si hay labels disponibles
            - üìã **Eval√∫a la categor√≠a/componente** afectado
            - üè∑Ô∏è **Explica claramente por qu√© cada label es apropiado**
            - üí° **Si no hay labels apropiados, explica qu√© labels ser√≠an necesarios**
            - üìù **Usa formato JSON v√°lido √∫nicamente**
            - üö´ **No incluyas explicaciones adicionales fuera del JSON**
            - üîß **Referencia variables shell como "${VAR}" (con comillas y llaves)**

            ## üéØ EJEMPLOS DE BUENA CLASIFICACI√ìN

            **Bug Report:**
            ```json
            {"labels_to_set": ["bug", "severity/high", "component/frontend"], "explanation": "Se trata de un bug en el frontend que causa errores cr√≠ticos para los usuarios. 'bug' identifica el tipo de issue, 'severity/high' indica el impacto significativo, y 'component/frontend' especifica la √°rea afectada."}
            ```

            **Feature Request:**
            ```json
            {"labels_to_set": ["enhancement", "priority/medium", "area/api"], "explanation": "Es una solicitud de nueva funcionalidad para la API. 'enhancement' categoriza como mejora, 'priority/medium' indica importancia moderada, y 'area/api' especifica el componente donde se implementar√≠a."}
            ```

            **Documentaci√≥n:**
            ```json
            {"labels_to_set": ["documentation", "good first issue"], "explanation": "Se solicita mejora en la documentaci√≥n. 'documentation' identifica el tipo de tarea y 'good first issue' porque es una contribuci√≥n accesible para nuevos colaboradores."}
            ```

            Analiza el issue actual y proporciona una clasificaci√≥n precisa y bien justificada.

      # =================================================================
      # PASO 5: APLICAR LABELS AL ISSUE
      # =================================================================
      # Procesa la respuesta de Gemini y aplica los labels sugeridos
      # =================================================================
      - name: 'üè∑Ô∏è Aplicar Labels al Issue'
        if: |-
          ${{ steps.gemini_issue_analysis.outputs.summary != '' }}
        env:
          REPOSITORY: '${{ github.repository }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          LABELS_OUTPUT: '${{ steps.gemini_issue_analysis.outputs.summary }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            // Limpiar marcadores de bloque de c√≥digo si est√°n presentes
            const rawLabels = process.env.LABELS_OUTPUT;
            core.info(`JSON crudo de labels: ${rawLabels}`);
            let parsedLabels;
            try {
              const trimmedLabels = rawLabels.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '').trim();
              parsedLabels = JSON.parse(trimmedLabels);
              core.info(`JSON de labels procesado: ${JSON.stringify(parsedLabels)}`);
            } catch (err) {
              core.setFailed(`Error al procesar JSON de labels desde Gemini: ${err.message}\nSalida cruda: ${rawLabels}`);
              return;
            }

            const issueNumber = parseInt(process.env.ISSUE_NUMBER);

            // Aplicar labels bas√°ndose en el resultado del triage
            if (parsedLabels.labels_to_set && parsedLabels.labels_to_set.length > 0) {
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: parsedLabels.labels_to_set
              });
              const explanation = parsedLabels.explanation ? ` - ${parsedLabels.explanation}` : '';
              core.info(`‚úÖ Labels aplicados exitosamente para #${issueNumber}: ${parsedLabels.labels_to_set.join(', ')}${explanation}`);
            } else {
              // Si no hay labels que aplicar, dejar el issue como est√°
              const explanation = parsedLabels.explanation ? ` - ${parsedLabels.explanation}` : '';
              core.info(`‚ÑπÔ∏è No hay labels que aplicar para #${issueNumber}, dejando como est√°${explanation}`);
            }

      # =================================================================
      # PASO 6: COMENTARIO DE ERROR EN CASO DE FALLO
      # =================================================================
      # Si el an√°lisis falla, informa al usuario con un comentario
      # =================================================================
      - name: '‚ùå Publicar Comentario de Error en An√°lisis'
        if: |-
          ${{ failure() && steps.gemini_issue_analysis.outcome == 'failure' }}
        env:
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          RUN_URL: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.ISSUE_NUMBER),
              body: `‚ùå **Error en la Clasificaci√≥n Autom√°tica de Issues**
              
            Hubo un problema con el sistema de clasificaci√≥n autom√°tica Gemini CLI.
            
            üîç **Acciones sugeridas:**
            - Revisa los [logs de la acci√≥n](${process.env.RUN_URL}) para m√°s detalles
            - Intenta clasificar manualmente usando \`@gemini-cli /triage\`
            - Contacta al administrador si el problema persiste
            
            üí° **Nota:** Puedes clasificar manualmente este issue mientras se resuelve el problema.`
            })
