name: 🤖 Asistente Gemini CLI

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  assistant:
    runs-on: ubuntu-latest
    if: >
      contains(github.event.comment.body, '@gemini-cli') &&
      !contains(github.event.comment.body, '/clasificar') &&
      !contains(github.event.comment.body, '/revisar')

    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v4

      - name: Extraer solicitud del usuario
        id: extract_request
        run: |
          # Extraer la parte después de @gemini-cli
          COMMENT_BODY="${{ github.event.comment.body }}"
          USER_REQUEST=$(echo "$COMMENT_BODY" | sed -n 's/.*@gemini-cli[[:space:]]*\(.*\)/\1/p' | head -1)

          # Guardar en salida de GitHub
          echo "user_request=$USER_REQUEST" >> $GITHUB_OUTPUT
          echo "Solicitud del usuario extraída: $USER_REQUEST"

      - name: Obtener contexto relevante
        id: context
        run: |
          # Obtener contexto actual del issue/PR
          if [ "${{ github.event.issue.pull_request }}" != "" ]; then
            CONTEXT_TYPE="pull_request"
            ITEM_NUMBER="${{ github.event.issue.number }}"
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
          else
            CONTEXT_TYPE="issue"
            ITEM_NUMBER="${{ github.event.issue.number }}"
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
          fi

          # Guardar contexto
          echo "context_type=$CONTEXT_TYPE" >> $GITHUB_OUTPUT
          echo "item_number=$ITEM_NUMBER" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "body=$BODY" >> $GITHUB_OUTPUT

          # Obtener archivos relevantes del repositorio
          find . -name "*.js" -o -name "*.json" -o -name "*.md" | head -20 > relevant_files.txt
          echo "Archivos relevantes encontrados:"
          cat relevant_files.txt

      - name: 🤖 Ejecutar Asistente Gemini
        id: gemini_assistant
        run: |
          PROMPT="Eres el Asistente Gemini CLI para el proyecto TaskFlow Manager, un experto en desarrollo web con amplio conocimiento en JavaScript, Node.js y mejores prácticas de desarrollo.

          CONTEXTO DEL PROYECTO:
          - Nombre: TaskFlow Manager
          - Tipo: Aplicación web de gestión de tareas
          - Stack Tecnológico:
            * Frontend: HTML5, CSS3, JavaScript vanilla
            * Backend: Node.js con Express
            * Base de datos: localStorage (frontend) + JSON API
            * Testing: Jest
            * Deployment: GitHub Pages + Heroku

          INFORMACIÓN DEL COMENTARIO:
          - Autor: ${{ github.event.comment.user.login }}
          - Tipo: ${{ steps.context.outputs.context_type }}
          - Número: #${{ steps.context.outputs.item_number }}
          - Título: ${{ steps.context.outputs.title }}
          
          PREGUNTA/SOLICITUD:
          ${{ steps.extract_request.outputs.user_request }}

          CONTEXTO ADICIONAL:
          ${{ steps.context.outputs.body }}

          CAPACIDADES COMO ASISTENTE:
          1. Revisión de Código: Analizar código JavaScript/Node.js y sugerir mejoras
          2. Resolución de Problemas: Ayudar con debugging y troubleshooting
          3. Arquitectura: Recomendar patrones de diseño y estructuras de código
          4. Optimización: Sugerir mejoras de rendimiento y mejores prácticas
          5. Testing: Ayudar con estrategias de testing y casos de prueba
          6. Seguridad: Identificar vulnerabilidades y recomendar soluciones
          7. Documentación: Asistir con documentación técnica y comentarios de código

          INSTRUCCIONES DE RESPUESTA:
          - Sé específico y contextual al proyecto TaskFlow Manager
          - Proporciona ejemplos de código cuando sea relevante
          - Incluye enlaces a documentación relevante cuando sea útil
          - Mantén un tono profesional pero amigable
          - Si no tienes suficiente información, pregunta por más detalles específicos
          - Prioriza soluciones prácticas y implementables

          FORMATO DE RESPUESTA:
          ## 🤖 Asistente Gemini CLI

          [Tu respuesta detallada aquí]

          ### 💡 Recursos Adicionales
          - [Enlaces o referencias útiles si aplica]

          ### 🔄 Próximos Pasos
          - [Pasos concretos que el usuario puede seguir]

          ---
          💡 Necesitas más ayuda? Menciona @gemini-cli con tu pregunta específica"

          RESPONSE=$(curl -s -H "Content-Type: application/json" \
            -H "x-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": \"$PROMPT\"
                }]
              }]
            }" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent")

          RESULT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Error: No se pudo procesar la solicitud del asistente"')
          
          echo "$RESULT" > respuesta_asistente.txt

      - name: 📝 Publicar respuesta del asistente
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const respuestaAsistente = fs.readFileSync('respuesta_asistente.txt', 'utf8');
            
            const comentario = respuestaAsistente + 
                              '\n\n---\n🤖 *Asistencia proporcionada por Gemini CLI*\n💡 *Para más ayuda, menciona @gemini-cli con tu pregunta específica*';

            const itemNumber = ${{ steps.context.outputs.item_number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: itemNumber,
              body: comentario
            });
