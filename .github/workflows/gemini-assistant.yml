name: üí¨ Gemini CLI Assistant

# =============================================================
# WORKFLOW: Gemini CLI - Asistente General
# =============================================================
# Este workflow proporciona un asistente general que responde preguntas
# y ofrece ayuda sobre el c√≥digo, arquitectura, mejores pr√°cticas, etc.
#
# ¬øQu√© hace?
# - Responde a menciones @gemini-cli SIN comandos espec√≠ficos
# - Proporciona asesoramiento general sobre c√≥digo y proyectos
# - Excluye comandos espec√≠ficos (/triage, /review) que tienen workflows dedicados
# =============================================================

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      comment_body:
        description: "Pregunta para el asistente"
        required: true
        type: string
      issue_number:
        description: "N√∫mero del issue o PR"
        required: false
        type: string

jobs:
  assistant:
    name: Asistente Gemini
    runs-on: ubuntu-latest
    timeout-minutes: 15

  # ----------------------------------------------------------------------
  # CONDICI√ìN DE EJECUCI√ìN (if):
  # Solo ejecutar cuando se mencione @gemini-cli SIN comandos espec√≠ficos (/triage, /review)
  # Nota: se excluyen los comandos /triage y /review porque existen workflows separados
  # que manejan esas acciones con prompts m√°s especializados y permisos distintos.
  # 
  # Casos de activaci√≥n:
  # 1. Ejecuci√≥n manual (workflow_dispatch)
  # 2. @gemini-cli en comentarios de issues (sin /triage ni /review)
  # 3. @gemini-cli en comentarios de PRs (sin /triage ni /review)  
  # 4. @gemini-cli en reviews de PRs (sin /triage ni /review)
  # ----------------------------------------------------------------------
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       !contains(github.event.comment.body, '/triage') &&
       !contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       !contains(github.event.comment.body, '/triage') &&
       !contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'pull_request_review' && 
       contains(github.event.review.body, '@gemini-cli') && 
       !contains(github.event.review.body, '/triage') &&
       !contains(github.event.review.body, '/review'))

    permissions:
      contents: write           # ‚úÖ CAMBIADO: Ahora puede escribir archivos
      issues: write
      pull-requests: write
      actions: read             # ‚úÖ AGREGADO: Para leer workflow info

  # ----------------------------------------------------------------------
  # PERMISOS ACTUALIZADOS:
  # - contents:write       ‚Üí ‚úÖ NUEVO: Permite escribir archivos, hacer commits y push
  # - issues:write         ‚Üí ‚úÖ Comentar en issues
  # - pull-requests:write  ‚Üí ‚úÖ Comentar en PRs
  # - actions:read         ‚Üí ‚úÖ NUEVO: Leer informaci√≥n de workflows
  # ----------------------------------------------------------------------
  # - contents:read -> permite leer archivos del repo si Gemini solicita contexto.
  # - issues:write -> necesario para publicar respuestas en issues/PRs.
  # - pull-requests:write -> necesario si el asistente crea comentarios en PRs.

    steps:
      - name: Checkout repository
        # Paso: traer el c√≥digo del repositorio al runner. fetch-depth: 0 para poder
        # acceder al historial completo si el asistente lo solicita mediante coreTools.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtener contexto del comentario
        # Paso: construir un JSON con los datos relevantes (comentario, t√≠tulo, cuerpo,
        # autor y nombre del repo). Este contexto se pasa al prompt para respuestas
        # m√°s ricas y espec√≠ficas.
        id: get-context
        uses: actions/github-script@v7
        with:
          script: |
            const context_data = {
              comment_body: context.payload.comment?.body || 
                           context.payload.review?.body || 
                           context.payload.inputs?.comment_body || '',
              issue_title: context.payload.issue?.title || '',
              issue_body: context.payload.issue?.body || '',
              pr_title: context.payload.pull_request?.title || '',
              pr_body: context.payload.pull_request?.body || '',
              author: context.payload.comment?.user?.login || 
                      context.payload.review?.user?.login ||
                      context.actor,
              repository_name: context.repo.repo,
              repository_owner: context.repo.owner
            };
            
            return JSON.stringify(context_data);

      - name: Ejecutar Gemini CLI Asistente
        # Paso: invocar la acci√≥n `run-gemini-cli` con el prompt adaptado al repo.
        # ‚úÖ ACTUALIZADO: Ahora puede modificar archivos y hacer commits autom√°ticamente
        # - `settings.coreTools` incluye herramientas de escritura de archivos
        # - `maxSessionTurns` limita la longitud de la sesi√≥n para evitar loops
        id: gemini-assistant
        uses: google-github-actions/run-gemini-cli@v0.1.10  # ‚úÖ VERSI√ìN CORRECTA
        with:
          prompt: |
            Eres un asistente de desarrollo de software inteligente y √∫til especializado en este proyecto TallerGeminiCLIActions.

            **CONTEXTO DEL PROYECTO:**
            ${{ steps.get-context.outputs.result }}

            **TU MISI√ìN:**
            Ayudar a desarrolladores con preguntas t√©cnicas, explicaciones de c√≥digo, y sugerencias de mejora relacionadas con GitHub Actions, Gemini CLI, y desarrollo web frontend.

            **CAPACIDADES PRINCIPALES:**
            üí° **An√°lisis de c√≥digo**: Explicar funciones, patrones y arquitectura
            ÔøΩ **Soluci√≥n de problemas**: Debugging, errores, mejores pr√°cticas
            üìö **Educaci√≥n t√©cnica**: Conceptos, algoritmos, tecnolog√≠as web
            üéØ **Recomendaciones**: Mejoras de c√≥digo, herramientas, optimizaciones
            üìù **Documentaci√≥n**: Ayuda con README, comentarios, gu√≠as de usuario
            ü§ñ **GitHub Actions**: Workflows, automatizaci√≥n, integraci√≥n CI/CD

            **COMANDOS ESPECIALIZADOS:**
            - `/explicar [concepto]` - Explica tecnolog√≠as, patrones o c√≥digo
            - `/sugerir [contexto]` - Propone mejoras o alternativas
            - `/documentar [elemento]` - Ayuda con documentaci√≥n
            - `/analizar [problema]` - Analiza issues o errores espec√≠ficos
            - `/optimizar [c√≥digo]` - Sugiere optimizaciones de rendimiento

            **GUIDELINES:**
            ‚úÖ Responde SIEMPRE en espa√±ol
            ‚úÖ S√© espec√≠fico y proporciona ejemplos de c√≥digo
            ‚úÖ Considera el contexto educativo del proyecto (es un taller)
            ‚úÖ Sugiere recursos adicionales para aprender m√°s
            ‚úÖ Usa emojis para claridad visual
            ‚úÖ Si necesitas m√°s contexto del repositorio, puedes solicitar archivos espec√≠ficos

            **FORMATO DE RESPUESTA:**
            
            ü§ñ **Asistente Gemini CLI**
            
            [Tu an√°lisis y respuesta detallada aqu√≠]
            
            üí° **Recursos adicionales:**
            [Enlaces o sugerencias de aprendizaje cuando sea relevante]
            
            ---
            üéØ **Tip**: Usa comandos como `/explicar`, `/sugerir`, `/analizar` para respuestas m√°s precisas.

            Analiza la consulta del usuario y proporciona una respuesta √∫til, educativa y contextual.

          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          settings: |-
            {
              "coreTools": [
                "read_file",
                "write_file",
                "create_file", 
                "edit_file",
                "run_shell_command(ls)",
                "run_shell_command(find)",
                "run_shell_command(grep)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(wc)",
                "run_shell_command(tree)",
                "run_shell_command(echo)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(gh)"
              ],
              "maxSessionTurns": 15
            }

      - name: Responder al comentario
        # Paso: si el asistente respondi√≥ con √©xito, publicar esa respuesta en el issue/PR.
        # Se determina el n√∫mero del issue/PR para comentar; si no existe, se hace solo log.
        if: success()
        uses: actions/github-script@v7
        env:
          GEMINI_RESPONSE: ${{ steps.gemini-assistant.outputs.summary }}
        with:
          script: |
            const issueNumber = context.payload.issue?.number || 
                              context.payload.pull_request?.number ||
                              context.payload.inputs?.issue_number;
                              
            if (issueNumber) {
              const geminiResponse = process.env.GEMINI_RESPONSE || 'No se pudo obtener respuesta del asistente.';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: geminiResponse
              });
              
              console.log(`‚úÖ Respuesta del asistente comentada en #${issueNumber}`);
              console.log(`üìÑ Respuesta: ${geminiResponse.substring(0, 200)}...`);
            } else {
              console.log('‚ùå No se pudo determinar el n√∫mero de issue o PR');
            }

      - name: Comentar si hay error
        # Paso: en caso de fallo durante la ejecuci√≥n, se publica un comentario amable
        # explicando el problema y enlazando a los logs para facilitar la investigaci√≥n.
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue?.number || 
                              context.payload.pull_request?.number ||
                              context.payload.inputs?.issue_number;
                              
            if (issueNumber) {
              const errorMessage = `‚ùå **Error en el Asistente Gemini CLI**
              
              Hubo un problema al procesar tu solicitud. Por favor:
              
              1. üîç Verifica que la pregunta est√© bien formateada
              2. üîÑ Intenta nuevamente en unos minutos
              3. üìã [Ver logs detallados](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              üí° **Tip**: Para mejor ayuda, menciona \`@gemini-cli\` seguido de tu pregunta espec√≠fica.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: errorMessage
              });
              
              console.log(`‚ùå Error reportado en #${issueNumber}`);
            }
