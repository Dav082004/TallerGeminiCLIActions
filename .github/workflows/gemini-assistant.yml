name: Gemini CLI - Asistente General

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      comment_body:
        description: "Pregunta para el asistente"
        required: true
        type: string
      issue_number:
        description: "N√∫mero del issue o PR"
        required: false
        type: string

jobs:
  assistant:
    name: Asistente Gemini
    runs-on: ubuntu-latest

    # Solo ejecutar cuando se mencione @gemini-cli sin comandos espec√≠ficos
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       !contains(github.event.comment.body, '/triage') &&
       !contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@gemini-cli') && 
       !contains(github.event.comment.body, '/triage') &&
       !contains(github.event.comment.body, '/review'))

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Obtener contexto del comentario
        id: get-context
        uses: actions/github-script@v7
        with:
          script: |
            const context_data = {
              comment_body: context.payload.comment?.body || context.payload.inputs?.comment_body || '',
              issue_title: context.payload.issue?.title || '',
              issue_body: context.payload.issue?.body || '',
              pr_title: context.payload.pull_request?.title || '',
              pr_body: context.payload.pull_request?.body || '',
              author: context.payload.comment?.user?.login || context.actor
            };
            
            return JSON.stringify(context_data);

      - name: Ejecutar Gemini CLI Asistente
        id: gemini-assistant
        uses: google-github-actions/run-gemini-cli@v0.1.10
        with:
          prompt: |
            Eres un asistente de desarrollo de software inteligente y √∫til.

            **CONTEXTO:**
            ${{ steps.get-context.outputs.result }}

            Tu rol es ayudar a desarrolladores con:

            üí° **Soluci√≥n de problemas**: Debugging, errores, mejores pr√°cticas
            üìö **Explicaciones t√©cnicas**: Conceptos, algoritmos, patrones de dise√±o
            üîß **Recomendaciones**: Herramientas, librer√≠as, arquitectura
            üìù **Documentaci√≥n**: Ayuda con README, comentarios, gu√≠as
            üéØ **Planificaci√≥n**: Estructura de proyectos, roadmaps t√©cnicos
            ü§ñ **Comandos espec√≠ficos**: 
              - `@gemini-cli /explicar [concepto]` - Explica conceptos t√©cnicos
              - `@gemini-cli /sugerir [contexto]` - Sugiere mejoras o soluciones
              - `@gemini-cli /documentar [c√≥digo]` - Ayuda con documentaci√≥n
              - `@gemini-cli /revisar [problema]` - Analiza problemas espec√≠ficos

            **Instrucciones**:
            - Responde siempre en espa√±ol
            - S√© espec√≠fico y pr√°ctico
            - Proporciona ejemplos de c√≥digo cuando sea relevante
            - Sugiere recursos adicionales cuando sea √∫til
            - Usa emojis para hacer las respuestas m√°s claras
            - Si necesitas m√°s contexto, haz preguntas espec√≠ficas

            **Formato de respuesta**:
            
            ü§ñ **Asistente Gemini CLI**
            
            [Tu respuesta detallada aqu√≠]
            
            ---
            üí° **Tip**: Usa comandos espec√≠ficos como `/explicar`, `/sugerir`, `/documentar` para respuestas m√°s precisas.

            Analiza la consulta del usuario y proporciona una respuesta √∫til y detallada.

          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}

      - name: Responder al comentario
        if: success()
        uses: actions/github-script@v7
        env:
          GEMINI_RESPONSE: ${{ steps.gemini-assistant.outputs.summary }}
        with:
          script: |
            const issueNumber = context.payload.issue?.number || 
                              context.payload.pull_request?.number ||
                              context.payload.inputs?.issue_number;
                              
            if (issueNumber) {
              const geminiResponse = process.env.GEMINI_RESPONSE || 'No se pudo obtener respuesta del asistente.';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: geminiResponse
              });
              
              console.log(`Respuesta del asistente comentada en #${issueNumber}`);
            }

      - name: Comentar si hay error
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue?.number || 
                              context.payload.pull_request?.number ||
                              context.payload.inputs?.issue_number;
                              
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '‚ùå Error en el asistente Gemini. [Ver logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
              });
            }
